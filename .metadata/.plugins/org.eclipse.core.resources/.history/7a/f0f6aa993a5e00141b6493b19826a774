package pnpiot.serializationperf;

import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.lang.management.ManagementFactory;
import java.lang.management.OperatingSystemMXBean;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

import org.apache.avro.Schema;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.GenericDatumWriter;
import org.apache.avro.generic.GenericRecord;
import org.apache.avro.io.BinaryEncoder;
import org.apache.avro.io.DatumWriter;
import org.apache.avro.io.EncoderFactory;

public class AvroApp {
	static String AvroSchema = "{`type`: `record`,`name`: `Car.Location`,`fields`: [{`name`: `timeStamp`,`type`: `long`},{`name`: `fixType`,`type`: `int`},{`name`: `latitude`,`type`: `int`},{`name`: `longitude`,`type`: `int`},{`name`: `heading`,`type`: `int`},{`name`: `altitude`,`type`: `int`},{`name`: `speed`,`type`: `int`}]}";

	public static void main(String[] args) throws Exception {
		AvroSchema = AvroSchema.replace('`', '"');
		long outerloops = 1000;
		if (args.length > 0) {
			outerloops = Math.abs(Integer.parseInt(args[0])) * 1000;
		}

		Schema schema = new Schema.Parser().parse(AvroSchema);
		GenericRecord locRecord = getLocRecord(schema);

		ByteArrayOutputStream outStream = new ByteArrayOutputStream();
		BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(outStream, null);
		DatumWriter<GenericRecord> datumWriter = new GenericDatumWriter<GenericRecord>(schema);

		long startTime = System.currentTimeMillis();
		for (int i = 0; i < outerloops; i++) {
			for (int j = 0; j < 1000; j++) {
				datumWriter.write(locRecord, encoder);
			}
			encoder.flush();
			// byte[] serializedBytes = outStream.toByteArray();
			outStream.reset();
		}
		outStream.close();

		long elapsedTime = System.currentTimeMillis() - startTime;
		printResult(outerloops, elapsedTime);
	}

	private static GenericRecord getLocRecord(Schema schema) {
		GenericRecord locRecord = new GenericData.Record(schema);
		locRecord.put("timeStamp", 101L);
		locRecord.put("fixType", 102);
		locRecord.put("latitude", 400);
		locRecord.put("longitude", 500);
		locRecord.put("heading", 300);
		locRecord.put("altitude", 100);
		locRecord.put("speed", 100);
		return locRecord;
	}

	private static void printResult(long loops, long elapsedTime) throws Exception {
		String filePath = System.getProperty("user.dir") + "\\jsonjackson.txt";
		PrintWriter writer = new PrintWriter(filePath, "UTF-8");

		System.out.println("AvroApp Result");
		writer.println("Avro App Result");

		System.out.println("Number of Iterations = " + loops);
		writer.println("Number of Iterations = " + loops);

		System.out.println("Mini seconds elapsed = " + elapsedTime);
		writer.println("Mini seconds elapsed = " + elapsedTime);

		OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();
		for (Method method : operatingSystemMXBean.getClass().getDeclaredMethods()) {
			method.setAccessible(true);
			if (method.getName().startsWith("get") && Modifier.isPublic(method.getModifiers())) {
				Object value = method.invoke(operatingSystemMXBean);
				System.out.println(method.getName().substring(3) + " = " + value);
				writer.println(method.getName().substring(3) + " = " + value);
			}
		}
		writer.close();
	}
}

// To generate the jar files with dependencies
// In Eclipse, File->Export->Java->Runnable Jar File
// Set destination as JsonJackson\JsonJackson.jar

// To run the jar files in Command Prompt
// Start Command Prompt as admin
// java -jar jsonjackson.jar 20
// open jsonjackson.txt in the current working folder

// To run the jar files in PowerShell
// Start PowerShell as admin
// &"C:\Program Files\Java\jdk1.8.0_05\bin\java.exe" -jar jsonjackson.jar 20
// open jsonjackson.txt in the current working folder

// To use measure-command
// Start PowerShell as admin
// measure-command { &"C:\Program Files\Java\jdk1.8.0_05\bin\java.exe" -jar jsonjackson.jar 20}
// open jsonjackson.txt in the current working folder

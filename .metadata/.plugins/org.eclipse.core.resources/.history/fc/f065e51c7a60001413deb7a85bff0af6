package pnpiot.serializationperf;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Date;

import org.apache.avro.Schema;
import org.apache.avro.file.DataFileReader;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.GenericDatumReader;
import org.apache.avro.generic.GenericDatumWriter;
import org.apache.avro.generic.GenericRecord;
import org.apache.avro.io.BinaryDecoder;
import org.apache.avro.io.BinaryEncoder;
import org.apache.avro.io.DatumReader;
import org.apache.avro.io.DatumWriter;
import org.apache.avro.io.Decoder;
import org.apache.avro.io.DecoderFactory;
import org.apache.avro.io.EncoderFactory;
import org.apache.avro.Schema;

public class AppAvro1 extends AppBase {
	String AvroSchemaStr = "{`type`: `record`,`name`: `Car.Location`,`fields`: [{`name`: `timeStamp`,`type`: `long`},{`name`: `fixType`,`type`: `int`},{`name`: `latitude`,`type`: `int`},{`name`: `longitude`,`type`: `int`},{`name`: `heading`,`type`: `int`},{`name`: `altitude`,`type`: `int`},{`name`: `speed`,`type`: `int`}]}";
	Schema schema = null;
	
	ByteArrayOutputStream outStream;
	GenericRecord genericRecord;
	BinaryEncoder encoder;
	DatumWriter<GenericRecord> datumWriter;
	
	public AppAvro1(int innerloop, long loops) throws Exception {
		super(innerloop, loops);
		className = new Object(){}.getClass().getEnclosingClass().getSimpleName();
		Result.cleanSampleFile(className);
	}

	@Override
	public void Init() {
		super.Init();
		AvroSchemaStr = AvroSchemaStr.replace('`', '"');
		schema = new Schema.Parser().parse(AvroSchemaStr);
	}
	
	@Override
	public void InitLoop(int i)
	{
		super.InitLoop(i);
		genericRecord = createLocationRecord(schema, i);
		outStream = new ByteArrayOutputStream();
		encoder = EncoderFactory.get().binaryEncoder(outStream, null);
		datumWriter = new GenericDatumWriter<GenericRecord>(schema);
	}
	
	@Override
	public void RunLoop(int i)
	{
		super.RunLoop(i);
		genericRecord.put("timeStamp", new Date().getTime());
		datumWriter.write(genericRecord, encoder);
	}
	@Override
	public void AfterLoop(int i)
	{
		super.AfterLoop(i);
		encoder.flush();
		displaySerializedRecord(outStream, schema);
		outStream.reset();
		outStream.close();
	}

	private static GenericRecord createLocationRecord(Schema schema, int i) {
		GenericRecord genericRecord = new GenericData.Record(schema);
		genericRecord.put("timeStamp", new Date().getTime());
		genericRecord.put("fixType", i % 256);
		genericRecord.put("latitude", 200000 + i);
		genericRecord.put("longitude", 300000 + i);
		genericRecord.put("heading", 400000 + i);
		genericRecord.put("altitude", 500000 + i);
		genericRecord.put("speed", i % 256);
		return genericRecord;
	}

	static void displaySerializedRecord(ByteArrayOutputStream outStream, Schema schema) throws Exception {
		byte[] serializedBytes = outStream.toByteArray();
		BinaryDecoder decoder = null;
		decoder = DecoderFactory.get().binaryDecoder(serializedBytes, decoder);
		GenericDatumReader<GenericRecord> reader = new GenericDatumReader<GenericRecord>(schema);
		GenericRecord rec = null;
		int writeInterval = innerloop / 5; // write 5 records for each innerloop
		for (int j = 0; !decoder.isEnd(); j++) {
			rec = reader.read(rec, decoder);
			if (j % writeInterval == 0) {
				String outputStr = rec.toString() + "\r\n";
				Result.writeToSampleFile(className, outputStr);
			}
		}
		Result.writeToSampleFile(className, "\r\n");
	}
}


}
